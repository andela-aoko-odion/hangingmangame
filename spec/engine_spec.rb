require_relative 'spec_helper'
include Hangman

RSpec.describe Engine do


  before(:each) do
    @game = Game.new
    @engine = Engine.new(@game)
    @engine.game_word = 'helloman'
    allow(@engine).to receive(:game_word).and_return("helloman")

  end

  describe "#pick_random_word" do
    it "computer picks a random word" do
      allow(@engine).to receive(:pick_random_word).and_return(@engine.game_word)
      expect(@engine.pick_random_word).to eql(@engine.game_word)
    end
  end

  describe "game_word" do
    it 'prints Game word' do
      expect(@engine.game_word).to eql(@engine.game_word)
    end
  end

    describe "#words_array" do
      it "returns charachers of the word" do
        expect(@engine.words_array).to eql(['h','e','l','l','o','m','a','n'])
      end
    end

    describe "#create_word_array" do
      it "returns an array of index and values" do
        expect(@engine.create_word_array).to eql(["h", "e", "l", "l", "o", "m", "a", "n"])
      end
    end

    #describe "#index_of" do
    #  it "returns the index of it argument" do
    #    allow(@engine).to receive(:basic_array).and_return( {"h"=>[0], "e"=>[1], "l"=>[2, 3], "o"=>[4], "m"=>[5], "a"=>[6], "n"=>[7]})
    #    expect(@engine.index_of("e")).to eql(1)
    #  end
    #end

    describe "#chars_left" do
      it "returns a unique version of words left" do
        expect(@engine.chars_left).to eql(["h", "e", "l", "o", "m", "a", "n"])
      end
    end

      #describe "#invalid_input" do
      #  it "decrement live by one" do
      #    allow(@engine).to receive(:lives).and_return(5)
      #    allow(@engine).to receive(:put).and_return('k')
      #    expect(@engine.invalid_input).to eql(:wrong)
      #  end
      #end

      #describe "#correct_input" do
      #  it "deletes a the entered correct character" do
      #    allow(@engine).to receive(:correct_input).and_return(["h", "e", "l", "o"])
      #    expect(@engine.correct_input(['h'])).to eql(["h", "e", "l", "o"])
      #  end
      #end

      describe "#word_length" do
        it "returns length word generated by computer" do
          expect(@engine.word_length).to eql(8)
        end
      end

      describe "#generate_random_word" do
        it "returns a valid word ie \'>5 word <=12\'" do
          expect(@engine.generate_random_word).to eql("helloman")
        end
      end

      describe "#is_word_valid?" do
        it "returns true if word is valid" do
          expect(@engine.is_word_valid?).to be true
        end
      end
end
