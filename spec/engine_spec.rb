require_relative 'spec_helper'
include Hangman

RSpec.describe Engine do


  before(:each) do
    @game = Game.new
    @engine = Engine.new(@game)
    allow(@engine).to receive(:game_word).and_return("friend")
  end

  describe "#pick_random_word" do
    it "computer picks a random word" do
      allow(@engine).to receive(:generate_random_word).and_return("")
    end
  end

  describe "game_word" do
    it 'takes user input' do
      allow(@engine).to receive(:game_word).and_return("friend")
      expect(@engine.game_word).to eql("friend")
    end
  end

    describe "#words_array" do
      it "returns charachers of the word" do
        allow(@engine).to receive(:words_array).and_return(['f','r','i','e','n','d'])
        expect(@engine.words_array).to eql(['f','r','i','e','n','d'])
      end
    end

    describe "#create_word_array" do
      it "returns an array of index and values" do
        allow(@engine).to receive(:create_word_array).and_return({"f"=>[0], "r"=>[1], "i"=>[2], "e"=>[3], "n"=>[4], "d"=>[5]})
        expect(@engine.create_word_array).to eql({"f"=>[0], "r"=>[1], "i"=>[2], "e"=>[3], "n"=>[4], "d"=>[5]})
      end
    end

    describe "#index_of" do
      it "returns the index of it argument" do
        allow(@engine).to receive(:index_of).and_return(1)
        expect(@engine.index_of).to eql(1)
      end
    end

    describe "#chars_left" do
      it "returns a unique version of words left" do
        allow(@engine).to receive(:chars_left).and_return(["h", "e", "l", "o"])
        expect(@engine.chars_left).to eql(["h", "e", "l", "o"])
      end
    end

      describe "#invalid_input" do
        it "decrement live by one" do
          allow(@engine).to receive(:invalid_input).and_return(4-1)
          expect(@engine.invalid_input).to eql(3)
        end
      end

      describe "#correct_input" do
        it "deletes a the entered correct character" do
          allow(@engine).to receive(:correct_input).and_return(["h", "e", "l", "o"])
          expect(@engine.correct_input(['h'])).to eql(["h", "e", "l", "o"])
        end
      end

      describe "#word_length" do
        it "returns length word generated by computer" do
          allow(@engine).to receive(:word_length).and_return(@engine.game_word.length)
          expect(@engine.word_length).to eql(6)
        end
      end

      describe "#generate_random_word" do
        it "returns a valid word ie \'>5 word <=12\'" do
          allow(@engine).to receive(:generate_random_word).and_return("friend")
          expect(@engine.generate_random_word).to eql("friend")
        end
      end

      describe "#is_word_valid?" do
        it "returns true if word is valid" do
          allow(@engine).to receive(:is_word_valid?).and_return(true)
          expect(@engine.is_word_valid?).to be true
        end
      end
end
